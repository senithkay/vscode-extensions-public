import { ChoreoLoginStatus, Organization, Project, Component, SubpathAvailableRequest, PushedComponent, OpenDialogOptions, ComponentCount, IsBareRepoRequestParams, SendTelemetryEventParams, SendTelemetryExceptionParams, ChoreoComponentCreationParams, getLocalComponentDirMetaDataRequest, getLocalComponentDirMetaDataRes, GitRepo, UserInfo, BuildStatus, Deployment, Endpoint, PushLocalComponentsToChoreoParams, CheckProjectDeletedParams, CloneChoreoProjectParams, GetDeletedComponentsParams, GetComponentsRequestParams, ChoreoWorkspaceMetaData } from "@wso2-enterprise/choreo-core";
import { GetComponentModelResponse } from "@wso2-enterprise/ballerina-languageclient";
import { IChoreoProjectClient } from "@wso2-enterprise/choreo-client/lib/project/types";
import { ChoreoGithubAppClientRPCWebView } from "@wso2-enterprise/choreo-client/lib/github/rpc/ghapp-client-rpc-webview";
import { ChoreoProjectManagerRPCWebview } from "@wso2-enterprise/choreo-client/lib/manager/rpc/manager-client-rpc-webview";
import type { WebviewApi } from "vscode-webview";
export declare class ChoreoWebViewAPI {
    private readonly _messenger;
    private static _instance;
    private _projectClientRpc;
    private _githubAppClient;
    private _choreoProjectManager;
    constructor(vscodeAPI: WebviewApi<unknown>);
    getLoginStatus(): Promise<ChoreoLoginStatus>;
    getCurrentOrg(): Promise<Organization>;
    getUserInfo(): Promise<UserInfo>;
    getAllProjects(orgId: number): Promise<Project[]>;
    getComponents(params: GetComponentsRequestParams): Promise<Component[]>;
    getDeletedComponents(params: GetDeletedComponentsParams): Promise<PushedComponent[]>;
    removeDeletedComponents(params: {
        projectId: string;
        components: PushedComponent[];
    }): Promise<void>;
    getComponentDevDeployment(component: Component): Promise<Deployment>;
    getComponentBuildStatus(component: Component): Promise<BuildStatus>;
    deleteComponent(params: {
        component: Component;
        projectId: string;
    }): Promise<Component | null>;
    pullComponent(params: {
        componentId: string;
        projectId: string;
    }): Promise<void>;
    getProjectLocation(projectId: string): Promise<string | undefined>;
    openExternal(url: string): Promise<void>;
    openChoreoProject(projectId: string): Promise<void>;
    cloneChoreoProject(params: CloneChoreoProjectParams): Promise<void>;
    cloneChoreoProjectWithDir(project: Project, dirPath: string, askOpeningOptions?: boolean): Promise<void>;
    askProjectDirPath(): Promise<string | undefined>;
    isBareRepo(params: IsBareRepoRequestParams): Promise<boolean>;
    setExpandedComponents(projId: string, componentNames: string[]): Promise<void>;
    getExpandedComponents(projId: string): Promise<string[]>;
    setPreferredProjectRepository(projId: string, repo: GitRepo): Promise<void>;
    getPreferredProjectRepository(projId: string): Promise<GitRepo>;
    isChoreoProject(): Promise<boolean>;
    getChoreoWorkspaceMetadata(): Promise<ChoreoWorkspaceMetaData>;
    getConsoleUrl(): Promise<string>;
    isSubpathAvailable(params: SubpathAvailableRequest): Promise<boolean>;
    readEndpointsYaml(params: SubpathAvailableRequest): Promise<Endpoint | undefined>;
    openBillingPortal(orgId: string): Promise<void>;
    getLocalComponentDirMetaData(params: getLocalComponentDirMetaDataRequest): Promise<getLocalComponentDirMetaDataRes>;
    checkProjectDeleted(params: CheckProjectDeletedParams): Promise<boolean>;
    createNonBalComponent(params: ChoreoComponentCreationParams): Promise<void>;
    createNonBalLocalComponentFromExistingSource(params: ChoreoComponentCreationParams): Promise<void>;
    getChoreoProject(): Promise<Project | undefined>;
    pushLocalComponentsToChoreo(params: PushLocalComponentsToChoreoParams): Promise<string[]>;
    pushLocalComponentToChoreo(params: {
        projectId: string;
        componentName: string;
    }): Promise<void>;
    openArchitectureView(): Promise<void>;
    openCellView(): Promise<void>;
    getDiagramComponentModel(projId: string, orgId: number): Promise<GetComponentModelResponse>;
    onLoginStatusChanged(callback: (newStatus: ChoreoLoginStatus) => void): void;
    onRefreshComponents(callback: () => void): void;
    onSelectedOrgChanged(callback: (newOrg: Organization) => void): void;
    onSelectedProjectChanged(callback: (projectId: string) => void): void;
    triggerCmd(cmdId: string, ...args: any): Promise<unknown>;
    getProjectClient(): IChoreoProjectClient;
    showErrorMsg(error: string): void;
    getChoreoGithubAppClient(): ChoreoGithubAppClientRPCWebView;
    getChoreoProjectManager(): ChoreoProjectManagerRPCWebview;
    closeWebView(): void;
    showOpenDialog(options: OpenDialogOptions): Promise<string[] | undefined>;
    static getInstance(): ChoreoWebViewAPI;
    setChoreoInstallOrg(orgId: number): Promise<void>;
    clearChoreoInstallOrg(): Promise<void>;
    updateProjectOverview(projectId: string): Promise<void>;
    getComponentCount(): Promise<ComponentCount>;
    hasChoreoSubscription(): Promise<boolean>;
    sendProjectTelemetryEvent(params: SendTelemetryEventParams): void;
    sendTelemetryEvent(params: SendTelemetryEventParams): void;
    sendTelemetryException(params: SendTelemetryExceptionParams): void;
    fireRefreshComponents(): Promise<void>;
}
