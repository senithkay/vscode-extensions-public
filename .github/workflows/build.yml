name: Build and run Tests

on: 
  workflow_call:
    inputs: 
      isPreRelease:
        default: true
        type: boolean  
      enableCache:
        default: true
        type: boolean  
      ballerina:
        description: Update Ballerina extension version
        type: boolean
        required: false
        default: true
      choreo:
        description: Update Choreo extension version
        type: boolean
        required: false
        default: true      
      version:
        default: 'N/A'
        type: string
        required: false

env:
  ballerina_version: 2201.7.1
  ballerina_zip_url: https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.7.1/ballerina-2201.7.1-swan-lake.zip
  ballerina_deb_url: https://dist.ballerina.io/downloads/2201.7.1/ballerina-2201.7.1-swan-lake-linux-x64.deb

jobs:
  Build_Stage:
    name: Build repo
    timeout-minutes: 45
    runs-on: ubuntu-latest
    outputs:
      runBalExtTests: ${{ steps.testMatrix.outputs.runBalExtTests }}
      runChoreoExtTests: ${{ steps.testMatrix.outputs.runChoreoExtTests }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BALLERINA_BOT_TOKEN }}
          fetch-depth: 2

      - name: Build
        uses: ./.github/actions/build
        with:
          isPreRelease: ${{ inputs.isPreRelease }}
          enableCache: ${{ inputs.enableCache }}
          ballerina: ${{ inputs.ballerina }}
          choreo: ${{ inputs.choreo }}
          version: ${{ inputs.version }}

      - name: Set test matrix
        shell: bash
        id: testMatrix
        run: |
          testArray=""
          if [[ ${{ inputs.isPreRelease }} = 'true' ]]; then
            # Get list of all changed files in the PR
            CHANGED_DIRS=$(git diff --name-only HEAD^..HEAD | grep -E "^workspaces/*" || true)

            # Loop through each directory and extract the folder name
            FOLDERS=()
            i=0
            while read -r dir; do
              # Extract the top-level folder name by removing the first path segment ('workspaces/') and the trailing slash (if any)
              folder=$(echo "$dir" | cut -d / -f 2 | sed 's/\/$//')
              # Add the folder name to the array if it hasn't been added already
              if ! [[ "${FOLDERS[@]}" =~ "$folder" ]]; then
                FOLDERS+=("$folder")
              fi
            done <<< "$CHANGED_DIRS"

            echo "Changed workspaces: $FOLDERS"

            if [[ "${FOLDERS[@]}" =~ "ballerina-languageclient" ]] || 
            [[ "${FOLDERS[@]}" =~ "expression-editor" ]] || 
            [[ "${FOLDERS[@]}" =~ "lang-service" ]] || 
            [[ "${FOLDERS[@]}" =~ "low-code-editor-commons" ]] || 
            [[ "${FOLDERS[@]}" =~ "low-code-ui-components" ]] || 
            [[ "${FOLDERS[@]}" =~ "statement-editor" ]] || 
            [[ "${FOLDERS[@]}" =~ "syntax-tree" ]] || 
            [[ "${FOLDERS[@]}" =~ "ballerina-extension" ]]; then
              echo "runBalExtTests=true" >> $GITHUB_OUTPUT
            fi 

            if [[ "${FOLDERS[@]}" =~ "choreo-client" ]] || 
            [[ "${FOLDERS[@]}" =~ "choreo-core" ]] || 
            [[ "${FOLDERS[@]}" =~ "choreo-extension" ]] || 
            [[ "${FOLDERS[@]}" =~ "choreo-webviews" ]]; then
              echo "runChoreoExtTests=true" >> $GITHUB_OUTPUT
            fi
          fi  

  ExtTest_Ballerina:
    name: Run Ext test
    needs: Build_Stage
    if: ${{ !inputs.isPreRelease || needs.Build_Stage.outputs.runBalExtTests || github.head_ref == 'main' }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v3
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup
        uses: gigara/rush-cache@v1
        with:
          pnpm: 7.26.3
          node: 16.x
          rush-install: true

      - name: Set up Ballerina
        run: |
          cd workspaces/ballerina-extension
          mkdir extractedDistribution
          wget ${{ env.ballerina_zip_url }}
          unzip -qq ./ballerina-${{ env.ballerina_version }}-swan-lake.zip -d ./extractedDistribution
          rm ballerina-${{ env.ballerina_version }}-swan-lake.zip
          balVersion=$(ls ./extractedDistribution)
          balHome=./extractedDistribution/$balVersion

          echo "$balHome/bin" >> $GITHUB_PATH

      - name: Run Test
        run: |
          cd workspaces/ballerina-extension
          xvfb-run --auto-servernum pnpm run test
        env:
          balVersion: ${{ steps.set-version.outputs.balVersion }}
          balHome: ${{ steps.set-version.outputs.balHome }}

  UiTest_Ballerina:
    name: Run Ballerina UI tests
    needs: Build_Stage
    if: ${{ !inputs.isPreRelease || needs.Build_Stage.outputs.runBalExtTests || github.head_ref == 'main' }}
    timeout-minutes: 45
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v3
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup
        uses: gigara/rush-cache@v1
        with:
          pnpm: 7.26.3
          node: 16.x
          rush-install: true

      - uses: ballerina-platform/setup-ballerina@v1
        name: Install Ballerina
        with:
          version: ${{ env.ballerina_version }}

      - name: UI Test
        run: |
          cd workspaces/ballerina-extension
          sudo apt-get install xvfb
          pnpm run ui-test-setup
          export DISPLAY=:98.0
          Xvfb -ac :98 -screen 0 1920x1080x16 & pnpm run ui-test

      - name: Publish UI Test Screenshots
        uses: actions/upload-artifact@v3
        with:
          path: workspaces/ballerina-extension/test-resources/screenshots/
          name: Ui-test-screenshots-${{ github.run_attempt }}
        if: failure()

  UiTest_Choreo:
    name: Run Choreo UI tests
    if: ${{ !inputs.isPreRelease || needs.Build_Stage.outputs.runChoreoExtTests || github.head_ref == 'main' }}
    needs: Build_Stage
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
      - name: Restore build
        uses: actions/download-artifact@v3
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup
        uses: gigara/rush-cache@v1
        with:
          pnpm: 7.26.3
          node: 16.x
          rush-install: true

      - uses: ballerina-platform/setup-ballerina@v1
        name: Install Ballerina
        with:
          version: ${{ env.ballerina_version }}

      - name: install packages
        run: |
          sudo apt-get install ffmpeg
          sudo apt-get install xvfb
          sudo apt-get install -y gnome-keyring
          sudo apt-get install libsecret-1.0
          sudo apt install dbus-x11

      - name: Run tests
        run: |
          cd workspaces/choreo-extension 
          pnpm run extest-setup
          export $(dbus-launch)
          export DISPLAY=:98.0
          Xvfb -ac :98 -screen 0 1920x1080x16 & pnpm run e2e-test
        env:
          TEST_CHOREO_EXT_ENV: prod
          TEST_IDP_USERNAME: e8085eae-9391-4d03-9302-672068c1fe50
          TEST_IDP_PASSWORD: ${{ secrets.TEST_IDP_PASSWORD }}
          TEST_USER_ORG_HANDLE: choreouser
          TEST_GITHUB_USERNAME: choreo-test-user@wso2.com
          TEST_GITHUB_PAT: ${{ secrets.TEST_GITHUB_PAT }}
          TEST_GITHUB_ORG: choreo-test-apps
          TEST_GITHUB_MONO_REPO: vscode-ext-mono-repo-tests-prod

      - name: Publish UI Test recording
        uses: actions/upload-artifact@v3
        with:
          path: workspaces/choreo-extension/test-resources/ui-test-out.mp4
          name: Integration-test-recording-${{ github.run_attempt }}
        if: failure()

      - name: Publish UI Test Screenshots
        uses: actions/upload-artifact@v3
        with:
          path: workspaces/choreo-extension/test-resources/screenshots/
          name: Integration-test-screenshots-${{ github.run_attempt }}
        if: failure()
