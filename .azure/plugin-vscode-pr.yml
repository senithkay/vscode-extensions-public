trigger:
  batch: true
  branches:
    include:
      - "*"

pr:
  branches:
    include:
      - "*"

pool:
  vmImage: "ubuntu-latest"

jobs:
  - job: Choreo
    displayName: Choreo Job
    timeoutInMinutes: 30

    strategy:
      matrix:
        vscCodeserver:
          vscVersion: 1.67.0
        vscLatest:
          vscVersion: 1.68.0

    variables:
      - group: codeserver-cdn-group

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 16.x

      - script: |
          sudo apt-get install unzip
        displayName: "Install required dependencies"

      - script: |
          mkdir extractedDistribution
          wget https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.1.2/ballerina-2201.1.2-swan-lake.zip
          unzip -qq ./ballerina-2201.1.2-swan-lake.zip -d ./extractedDistribution
          rm ballerina-2201.1.2-swan-lake.zip
          balVersion=$(ls $(Build.SourcesDirectory)/extractedDistribution)
          balHome=$(Build.SourcesDirectory)/extractedDistribution/$balVersion
          echo "##vso[task.prependpath]$balHome/bin"
        displayName: "Set up Ballerina"

      - script: |
          INTEGRATION_TEST_RUN_ID=$(uuidgen)
        displayName: "Generate a unique ID for test run"

      - script: ./gradlew clean build -x test -x uiTest
        displayName: "Build plugin repo"
        env:
          NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

      - script: sudo apt-get install xvfb && xvfb-run --auto-servernum npm run test
        condition: and(succeeded(), eq(variables.vscVersion, '1.68.0'))
        displayName: "Plugin Test"

      - script: |
          npx extest get-vscode -c $(vscVersion) && npx extest get-chromedriver -c $(vscVersion) && npx extest install-vsix -f $(ls *.vsix)
          export DISPLAY=:98.0
          Xvfb -ac :98 -screen 0 1920x1080x16 & 
          npm run ui-test
        displayName: "UI Test"

      - script: python lcov_cobertura.py coverage/lcov.info -b src/ -o coverage/coverage.xml
        displayName: "Convert lcov to cobertura"

      - task: PublishPipelineArtifact@1
        displayName: "Publish coverage reports"
        name: PublishCoverageReports
        condition: and(succeeded(), eq(variables.vscVersion, 'latest'))
        inputs:
          targetPath: "coverage"
          artifactType: "pipeline"
          artifactName: "vscode-extension-coverage-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishCodeCoverageResults@1
        condition: and(succeeded(), eq(variables.vscVersion, 'latest'))
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "coverage/coverage.xml"

      - task: PublishPipelineArtifact@1
        name: publishScreenshots
        condition: failed()
        displayName: "Publish UI Test Screenshots"
        inputs:
          targetPath: "./test-resources/screenshots/"
          artifactName: Ui-test-screenshots-$(INTEGRATION_TEST_RUN_ID)    
