resources:
  webhooks:
    - webhook: CodeServerBuildTrigger
      connection: ballerina-code-server-build-trigger-connection
  repositories:
    - repository: BALLERINA_PLUGIN_VSCODE
      type: github
      name: wso2-enterprise/ballerina-plugin-vscode
      ref: refs/heads/code-server-build
      endpoint: choreo-cicd-committer

trigger: none

pr: none

jobs:
  - job: DockerBuildandPush

    pool:
      vmImage: "ubuntu-latest"

    variables:
      - group: codeserver-cdn-group
      - name: CONTAINER_REGISTRY
        value: choreocontrolplane.azurecr.io
      - name: REPOSITORY
        value: choreoipaas/ballerina-code-server
      - name: CODE_SERVER_TEST_SRC
        value: code-server-tests

    steps:
      - script: |
          TAG="$(date +'%Y%m%d-%H%M')"
          echo "##vso[task.setvariable variable=TAG]${TAG}"
          echo "Generated Docker tag: ${TAG}"
        displayName: "Generate Docker tag"

      - checkout: BALLERINA_PLUGIN_VSCODE
        persistCredentials: true

      - script: |
          git config --global user.email "choreo-cicd@wso2.com"
          git config --global user.name "Choreo CI Agent"
          echo "git status"
          git status
          echo "Update build.txt"
          echo "$(TAG) https://github.com/wso2/ballerina-plugin-vscode/releases/download/${{ parameters.CodeServerBuildTrigger.version }}/ballerina.vsix" >> build.txt
          git add build.txt
          git commit -m "Update build details for $(TAG)"
          git push origin HEAD:code-server-build
          git checkout origin/main
        displayName: "Update code-server-build branch new build details"

      - script: |
          node --version
          npm --version
          npm config set @wso2-enterprise:registry=https://npm.pkg.github.com
          npm install
        displayName: "Install node modules"
        env:
          NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

      - task: Docker@2
        displayName: "Build Docker image"
        inputs:
          command: build
          containerRegistry: "wso2choreo-control-plane-acr"
          repository: $(REPOSITORY)
          Dockerfile: ".github/workflows/resources/code-server/4/Dockerfile"
          buildContext: "."
          tags: |
            latest
            $(TAG)
          arguments: "--build-arg BALLERINA_VSIX_URI=https://github.com/wso2/ballerina-plugin-vscode/releases/download/${{ parameters.CodeServerBuildTrigger.version }}/ballerina.vsix  --build-arg BALLERINA_VSIX_NAME=ballerina.vsix"

      - task: Docker@2
        displayName: "Login to ACR and validate"
        inputs:
          command: login
          containerRegistry: "wso2choreo-control-plane-acr"
      - script: |
          containerID=$(docker run -u 0 -d \
            --name=code-server \
            -e PUID=10500 \
            -e PGID=10500 \
            -e TZ=Europe/London \
          -e VSCODE_CHOREO_SESSION_USERNAME=Test_User \
          -e VSCODE_CHOREO_GATEWAY_BASE_URI=https://choreocontrolplane.preview-dv.choreo.dev \
          -e VSCODE_CHOREO_DEPLOY_URI=https://consolev2.preview-dv.choreo.dev/home \
          -e BALLERINA_LOW_CODE_RESOURCES_VERSION=20220608-1244 \
          -e VSCODE_CHOREO_SESSION_TOKEN=eyJ4NXQiOiJOVGd5TTJabE9XTEfT1aNZMw0SpnKtnTO05OcspqVc1Vut7HC7B8ZY3cthwJ94vBBPvrn7CRl_-hnAe4VuIisdbTOsOUfzN3U-O2Dc5t2IWLjgRjYtkrqg \
            -p 8443:8443 \
            -p 9090:9090 \
            --restart unless-stopped \
            choreocontrolplane.azurecr.io/choreoipaas/ballerina-code-server:latest)
          echo $containerID
          balerinaVersion=$(docker exec "$containerID" bal -v)
          echo $balerinaVersion
          docker exec "$containerID" cd /.
          docker exec "$containerID" sed -i '/<\/head>/i <!--Remove Loader -->\n<script>\ndocument.addEventListener("DOMContentLoaded", function() {document.querySelector(".loading").remove();}, false);document.querySelector(".loading").remove();\n</script>' /usr/local/share/.config/yarn/global/node_modules/code-server/src/browser/pages/vscode.html
          docker exec -i "$containerID" bash -c "rm -r /config/workspace/"
          docker exec -i "$containerID" bash -c "cd /config/ && bal new workspace"
          docker exec -i "$containerID" bash -c "sudo chmod -R 757 /config/workspace/"

      - script: |
          INTEGRATION_TEST_RUN_ID=$(uuidgen)
          echo "##vso[task.setvariable variable=INTEGRATION_TEST_RUN_ID]${INTEGRATION_TEST_RUN_ID}"
          echo "Generated integration test run id: ${INTEGRATION_TEST_RUN_ID}"
        displayName: "Generate a unique id for the run"
      - task: NodeTool@0
        displayName: "Install Node.js"
        inputs:
          versionSpec: 14.16.0
      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: "$(HOME)/.npm"
        displayName: Cache npm

      # - task: Cache@2
      #   inputs:
      #     key: 'cypress | "$(Agent.OS)"'
      #     restoreKeys: |
      #       cypress | "$(Agent.OS)"
      #     path: "$(HOME)/.cache/Cypress"
      #   displayName: Cache Cypress Binaries
      # - script: |
      #     cd /.
      #     cd $(CODE_SERVER_TEST_SRC)
      #     npm install
      #   displayName: "Install Cypress"
      # - script: |
      #     cd $(CODE_SERVER_TEST_SRC)
      #     npm install --dev typescript
      #     npx cypress run --headless --spec 'cypress/integration/*.ts' -- --record --tag $(Build.BuildNumber)
      #   displayName: "Run Code server Integration tests with cypress"
      #   env:
      #     CYPRESS_RECORD_KEY: $(cypress_record_key)

      # - task: PublishPipelineArtifact@1
      #   name: publishScreenshots
      #   condition: always()
      #   displayName: "Publish Cypress Screenshots"
      #   inputs:
      #     targetPath: "$(CODE_SERVER_TEST_SRC)/cypress/screenshots"
      #     artifactName: Code-server-Tests-cypress-screenshots-$(INTEGRATION_TEST_RUN_ID)

      # - task: PublishPipelineArtifact@1
      #   name: publishRecording
      #   condition: always()
      #   displayName: "Publish Cypress Recordings"
      #   inputs:
      #     targetPath: "$(CODE_SERVER_TEST_SRC)/cypress/videos"
      #     artifactName: Code-server-Tests-cypress-recordings-$(INTEGRATION_TEST_RUN_ID)

      # - task: PublishPipelineArtifact@1
      #   name: publishSnapshots
      #   condition: always()
      #   displayName: "Publish Cypress Snapshots"
      #   inputs:
      #     targetPath: "$(CODE_SERVER_TEST_SRC)/cypress/snapshots"
      #     artifactName: Code-server-Tests-cypress-snapshots-$(INTEGRATION_TEST_RUN_ID)

      - task: Docker@2
        displayName: "Push Docker image"
        inputs:
          command: push
          containerRegistry: "wso2choreo-control-plane-acr"
          repository: $(REPOSITORY)
          tags: |
            latest
            $(TAG)

      - task: CmdLine@2
        displayName: "Create Folder to extract vsix"
        inputs:
          script: |
            mkdir vsix

      - task: PythonScript@0
        displayName: "Download vsix"
        inputs:
          scriptSource: inline
          script: |
            import urllib.request
            url = "https://github.com/wso2/ballerina-plugin-vscode/releases/download/${{ parameters.CodeServerBuildTrigger.version }}/ballerina.vsix"
            path = r"$(Build.SourcesDirectory)/vsix/ballerina.vsix"
            urllib.request.urlretrieve(url, path)

      - task: ExtractFiles@1
        displayName: "Extract vsix"
        inputs:
          archiveFilePatterns: "vsix/ballerina.vsix"
          cleanDestinationFolder: false
          destinationFolder: "vsix"

      - task: AzureCLI@2
        displayName: "Upload files to CDN"
        inputs:
          azureSubscription: "choreo-codeserver-rg"
          scriptType: "bash"
          scriptLocation: "inlineScript"
          inlineScript: |
            az storage blob upload-batch --account-name choreosharedcodeserver --source vsix/extension/resources/jslibs --destination codeserver/ballerina-low-code-resources@$(TAG)/jslibs
            az storage blob upload --account-name choreosharedcodeserver --file node_modules/@wso2-enterprise/ballerina-low-code-editor-distribution/build/editor.worker.js --container-name codeserver --name ballerina-low-code-resources@$(TAG)/jslibs/editor.worker.js
