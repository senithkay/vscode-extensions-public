resources:
  repositories:
    - repository: common-templates
      type: github
      name: wso2-enterprise/choreo-common-pipeline-templates
      endpoint: choreo-cicd
      
trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: "ubuntu-latest"

stages:
- stage: Build
  jobs:
    - job: Choreo
      displayName: Build repo
      timeoutInMinutes: 30

      variables:
        - group: codeserver-cdn-group

      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: 16.x

        - script: |
            sudo apt-get install unzip
          displayName: "Install required dependencies"

        - script: |
            mkdir extractedDistribution
            wget https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.1.2/ballerina-2201.1.2-swan-lake.zip
            unzip -qq ./ballerina-2201.1.2-swan-lake.zip -d ./extractedDistribution
            rm ballerina-2201.1.2-swan-lake.zip
            balVersion=$(ls $(Build.SourcesDirectory)/extractedDistribution)
            balHome=$(Build.SourcesDirectory)/extractedDistribution/$balVersion
            echo "##vso[task.prependpath]$balHome/bin"
          displayName: "Set up Ballerina"

        - script: sudo apt-get install xvfb && xvfb-run --auto-servernum ./gradlew clean build -x uiTest
          displayName: "Build plugin repo"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)
            IS_RELEASE: true
            SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

- stage: Plugintest
  dependsOn: Build
  jobs:
    - job: Choreo
      displayName: Run Plugin test
      timeoutInMinutes: 10
      steps:
        - script: npm run tests
          displayName: "UI Test"
        
        - script: python lcov_cobertura.py coverage/lcov.info -b src/ -o coverage/coverage.xml
          displayName: "Convert lcov to cobertura"

        - task: PublishPipelineArtifact@1
          displayName: "Publish coverage reports"
          name: PublishCoverageReports
          condition: always()
          inputs:
            targetPath: "coverage"
            artifactType: "pipeline"
            artifactName: "vscode-extension-coverage-$(INTEGRATION_TEST_RUN_ID)"

        - task: PublishCodeCoverageResults@1
          condition: always()
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: "coverage/coverage.xml"  

- stage: UItest
  dependsOn: Build
  jobs:
    - job: Choreo
      displayName: Run UI tests
      timeoutInMinutes: 30
      steps:
        - script: |
            INTEGRATION_TEST_RUN_ID=$(uuidgen)
          displayName: "Generate a unique ID for test run"

        - script: |
            npx extest get-vscode -c 1.68.0 && npx extest get-chromedriver -c 1.68.0 && npx extest install-vsix -f $(ls *.vsix)
            export DISPLAY=:98.0
            Xvfb -ac :98 -screen 0 1920x1080x16 & 
            npm run ui-test
          displayName: "UI Test"

        - task: PublishPipelineArtifact@1
          name: publishScreenshots
          condition: failed()
          displayName: "Publish UI Test Screenshots"
          inputs:
            targetPath: "./test-resources/screenshots/"
            artifactName: Ui-test-screenshots-$(INTEGRATION_TEST_RUN_ID)     

- stage: LCtest
  dependsOn: Build
  jobs:
    - job: Choreo
      displayName: Run Low Code Editor tests
      timeoutInMinutes: 120
      steps:
        - script: |
            INTEGRATION_TEST_RUN_ID=$(uuidgen)
          displayName: "Generate a unique ID for test run"

        - script: |
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb
          displayName: "Install Chrome Stable Version"

        - script: |
            cd ballerina-low-code-editor  
            npm test
          displayName: "Run Integration Tests"
          
        - task: PublishPipelineArtifact@1
          displayName: 'Publish test fail screenshots'
          name: PublishTestFailScreenshots
          condition: failed()
          inputs:
            targetPath: 'ballerina-low-code-editor/integration-tests/cypress/screenshots'
            artifactName: 'low-code-cypress-screenshots-$(INTEGRATION_TEST_RUN_ID)'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish coverage reports'
          name: PublishCoverageReports
          condition: always()
          inputs:
            targetPath: 'ballerina-low-code-editor/integration-tests/coverage'
            artifactType: 'pipeline'
            artifactName: 'low-code-cypress-coverage-$(INTEGRATION_TEST_RUN_ID)'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: 'ballerina-low-code-editor/integration-tests/coverage/cobertura-coverage.xml'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish test videos'
          name: PublishTestVideos
          condition: always()
          inputs:
            targetPath: 'ballerina-low-code-editor/integration-tests/cypress/videos'
            artifactName: 'low-code-cypress-recordings-$(INTEGRATION_TEST_RUN_ID)'

        - task: PublishPipelineArtifact@1
          displayName: 'Publish test failure console logs'
          name: PublishFailingConsoleTestsLogs
          condition: failed()
          inputs:
            targetPath: 'ballerina-low-code-editor/integration-tests/logs'
            artifactType: 'pipeline'
            artifactName: 'low-code-cypress-failure-test-logs-$(INTEGRATION_TEST_RUN_ID)'
              
# - stage: Publish
#   dependsOn:
#   - Plugintest
#   - UItest
#   - LCtest
#   jobs:
#     - job: Choreo
#       displayName: Publish vsix
#       timeoutInMinutes: 5
#       steps:
#         - script: find . -type f -name 'ballerina-*.vsix' -exec sh -c 'x="{}"; mv "$x" ballerina.vsix' \;
#           displayName: "Rename the vsix"

#         - script: |
#             RELEASE_VERSION_VALUE=$(git describe --tags --abbrev=0)
#             echo "##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]$RELEASE_VERSION_VALUE"
#           name: setReleaseTag
#           displayName: "Set the release tag"

#         - script: |
#             echo $(setReleaseTag.RELEASE_VERSION)

#         - script: |
#             createResponse=`curl -X POST  -H "Accept: application/vnd.github.v3+json" \
#             -H "Authorization:token $(NPM_ACCESS_TOKEN)" -d '{"tag_name":"$(setReleaseTag.RELEASE_VERSION)", \
#             "draft":false, "name": "Release $(setReleaseTag.RELEASE_VERSION)", "prerelease":true}' \
#             https://api.github.com/repos/wso2/ballerina-plugin-vscode/releases` \
#             && id=`echo "$createResponse" | sed -n -e 's/"id":\ \([0-9]\+\),/\1/p' | head -n 1 | sed 's/[[:blank:]]//g'` && \
#             uploadResponse=`curl -X POST -H "Authorization:token $(NPM_ACCESS_TOKEN)" -H "Content-Type:application/octet-stream" \
#               --data-binary @ballerina.vsix \
#               https://uploads.github.com/repos/wso2/ballerina-plugin-vscode/releases/$id/assets?name=ballerina.vsix`
#           displayName: "Create a github release"
#           env:
#             NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

#         - script: |
#             body=$(cat << EOF
#             {
#               "cards": [
#                 {
#                   "sections": [
#                     {
#                       "widgets": [
#                         {
#                           "keyValue": {
#                             "topLabel": "New Release",
#                             "content": "$(setReleaseTag.RELEASE_VERSION)",
#                             "onClick": {
#                               "openLink": {
#                                 "url": "https://github.com/wso2/ballerina-plugin-vscode/releases/tag/$(setReleaseTag.RELEASE_VERSION)"
#                               }
#                             },
#                             "iconUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Visual_Studio_Code_1.35_icon.svg/512px-Visual_Studio_Code_1.35_icon.svg.png",
#                             "button": {
#                               "textButton": {
#                                 "text": "Download VSIX",
#                                 "onClick": {
#                                   "openLink": {
#                                     "url": "https://github.com/wso2/ballerina-plugin-vscode/releases/download/$(setReleaseTag.RELEASE_VERSION)/ballerina.vsix"
#                                   }
#                                 }
#                               }
#                             }
#                           }
#                         }
#                       ]
#                     }
#                   ]
#                 }
#               ]
#             }
#             EOF
#             )
#             curl \
#               -X POST \
#               -H 'Content-Type: application/json' \
#               "https://chat.googleapis.com/v1/spaces/AAAAtkMpL8k/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=GmcsSshpc6BD68bOPu4wadJ0WjQLbDQBag3zwYPBoZ0%3D" \
#               -d "$body"
#           displayName: "Release Notification"

#         - script: |
#             payload='{ "version" : "$(setReleaseTag.RELEASE_VERSION)" }'
#             echo $payload
#             curl -v --header "Content-Type: application/json" \
#             --request POST \
#             --data "$payload" \
#             https://dev.azure.com/choreo-devops/_apis/public/distributedtask/webhooks/ballerina-code-server-build-trigger?api-version=6.0-preview
#           displayName: "Trigger code-server build"

# - stage: Error
#   condition: failed()     
#     jobs:
#     - job: Choreo   
#         - template: hangouts-notify.yml@common-templates
#           parameters:
#             organizationName: wso2-choreo
#             webhookUrl: https://chat.googleapis.com/v1/spaces/AAAAtkMpL8k/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=GmcsSshpc6BD68bOPu4wadJ0WjQLbDQBag3zwYPBoZ0%3D
