trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: "ubuntu-latest"

jobs:
  - job: Choreo
    displayName: Choreo Job
    timeoutInMinutes: 30

    variables:
      - group: codeserver-cdn-group

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: 16.x

      - script: |
          sudo apt-get install unzip
        displayName: "Install required dependencies"

      - script: |
          mkdir extractedDistribution
          wget https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.1.2/ballerina-2201.1.2-swan-lake.zip
          unzip -qq ./ballerina-2201.1.2-swan-lake.zip -d ./extractedDistribution
          rm ballerina-2201.1.2-swan-lake.zip
          balVersion=$(ls $(Build.SourcesDirectory)/extractedDistribution)
          balHome=$(Build.SourcesDirectory)/extractedDistribution/$balVersion
          echo "##vso[task.prependpath]$balHome/bin"
        displayName: "Set up Ballerina"

      - script: |
          INTEGRATION_TEST_RUN_ID=$(uuidgen)
        displayName: "Generate a unique ID for test run"

      - script: sudo apt-get install xvfb && xvfb-run --auto-servernum ./gradlew clean build -x uiTest
        displayName: "Build plugin repo"
        env:
          NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)
          IS_RELEASE: true
          SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

      - script: |
          npx extest get-vscode -c 1.68.0 && npx extest get-chromedriver -c 1.68.0 && npx extest install-vsix -f $(ls *.vsix)
          export DISPLAY=:98.0
          Xvfb -ac :98 -screen 0 1920x1080x16 & 
          npm run ui-test
        displayName: "UI Test"

      - script: find . -type f -name 'ballerina-*.vsix' -exec sh -c 'x="{}"; mv "$x" ballerina.vsix' \;
        displayName: "Rename the vsix"

      - script: |
          RELEASE_VERSION_VALUE=$(git describe --tags --abbrev=0)
          echo "##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]$RELEASE_VERSION_VALUE"
        name: setReleaseTag
        displayName: "Set the release tag"

      - script: |
          echo $(setReleaseTag.RELEASE_VERSION)

      - script: |
          createResponse=`curl -X POST  -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization:token $(NPM_ACCESS_TOKEN)" -d '{"tag_name":"$(setReleaseTag.RELEASE_VERSION)", \
          "draft":false, "name": "Release $(setReleaseTag.RELEASE_VERSION)", "prerelease":true}' \
          https://api.github.com/repos/wso2/ballerina-plugin-vscode/releases` \
           && id=`echo "$createResponse" | sed -n -e 's/"id":\ \([0-9]\+\),/\1/p' | head -n 1 | sed 's/[[:blank:]]//g'` && \
           uploadResponse=`curl -X POST -H "Authorization:token $(NPM_ACCESS_TOKEN)" -H "Content-Type:application/octet-stream" \
            --data-binary @ballerina.vsix \
            https://uploads.github.com/repos/wso2/ballerina-plugin-vscode/releases/$id/assets?name=ballerina.vsix`
        displayName: "Create a github release"
        env:
          NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

      - script: python lcov_cobertura.py coverage/lcov.info -b src/ -o coverage/coverage.xml
        displayName: "Convert lcov to cobertura"

      - task: PublishPipelineArtifact@1
        displayName: "Publish coverage reports"
        name: PublishCoverageReports
        condition: always()
        inputs:
          targetPath: "coverage"
          artifactType: "pipeline"
          artifactName: "vscode-extension-coverage-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishCodeCoverageResults@1
        condition: always()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "coverage/coverage.xml"

      - task: PublishPipelineArtifact@1
        name: publishScreenshots
        condition: failed()
        displayName: "Publish UI Test Screenshots"
        inputs:
          targetPath: "./test-resources/screenshots/"
          artifactName: Ui-test-screenshots-$(INTEGRATION_TEST_RUN_ID)   

      - script: |
          payload='{ "version" : "$(setReleaseTag.RELEASE_VERSION)" }'
          echo $payload
          curl -v --header "Content-Type: application/json" \
          --request POST \
          --data "$payload" \
          https://dev.azure.com/choreo-devops/_apis/public/distributedtask/webhooks/ballerina-code-server-build-trigger?api-version=6.0-preview
        displayName: "Trigger code-server build"
