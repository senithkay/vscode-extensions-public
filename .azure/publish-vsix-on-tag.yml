resources:
  repositories:
    - repository: common-templates
      type: github
      name: wso2-enterprise/choreo-common-pipeline-templates
      endpoint: choreo-cicd
      
trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: "ubuntu-latest"

variables:
  ballerina_version: 2201.2.3
  ballerina_zip_url: https://github.com/ballerina-platform/ballerina-distribution/releases/download/v$(ballerina_version)/ballerina-$(ballerina_version)-swan-lake.zip
  ballerina_deb_url: https://dist.ballerina.io/downloads/$(ballerina_version)/ballerina-$(ballerina_version)-swan-lake-linux-x64.deb
  
parameters:
  - name: lowCodeTestStages
    type: object
    default:
      - stage: test_connectors
        command: test-connectors
        displayName: Run connector tests
      - stage: test_block_level
        displayName: Run block level tests
        command: test-block-level
      - stage: test_module_level
        displayName: Run module level tests
        command: test-module-level
      - stage: test_se
        displayName: Run statement editor tests
        command: test-se

stages:
- stage: Build
  jobs:
    - job: Choreo
      displayName: Build repo
      timeoutInMinutes: 45

      variables:
        - group: codeserver-cdn-group

      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: 16.x

        - script: |
            wget $(ballerina_deb_url)
            sudo dpkg -i ballerina-$(ballerina_version)-swan-lake-linux-x64.deb
          displayName: "Install Ballerina"

        - script: ./gradlew clean build -x test -x uiTest
          displayName: "Build plugin repo"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)
            IS_RELEASE: true
            SENTRY_AUTH_TOKEN: $(SENTRY_AUTH_TOKEN)

        - script: |
            find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +
            rm *.zip
            zip -r build.zip ./   
          displayName: "zip repo"

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: build.zip
            artifactName: PluginBuild    

- stage: PluginTest
  dependsOn: Build
  jobs:
    - job: Choreo
      displayName: Run Plugin test
      timeoutInMinutes: 30

      variables:
        - group: codeserver-cdn-group

      steps:
        - checkout: none

        - task: NodeTool@0
          inputs:
            versionSpec: 16.x
        
        - download: current
          artifact: PluginBuild

        - task: CopyFiles@2
          inputs:
            SourceFolder: "$(Pipeline.Workspace)/PluginBuild/"
            contents: 'build.zip'
            targetFolder: $(System.DefaultWorkingDirectory)  

        - script: |
            sudo apt-get install xvfb
            unzip build.zip
          displayName: "Setup workspace"
          
        - script: npm install
          displayName: "Install node modules"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

        - script: |
            INTEGRATION_TEST_RUN_ID=$(uuidgen)
            echo "##vso[task.setvariable variable=INTEGRATION_TEST_RUN_ID]${INTEGRATION_TEST_RUN_ID}"
            echo "Generated integration test run id: ${INTEGRATION_TEST_RUN_ID}"
          displayName: "Generate a unique id for the run"

        - script: |
            mkdir extractedDistribution
            wget $(ballerina_zip_url)
            unzip -qq ./ballerina-$(ballerina_version)-swan-lake.zip -d ./extractedDistribution
            rm ballerina-$(ballerina_version)-swan-lake.zip
            balVersion=$(ls $(Build.SourcesDirectory)/extractedDistribution)
            balHome=$(Build.SourcesDirectory)/extractedDistribution/$balVersion
            echo "##vso[task.prependpath]$balHome/bin"
          displayName: "Set up Ballerina"

        - script: xvfb-run --auto-servernum npm run test
          displayName: "Run Test"
        
        - script: python lcov_cobertura.py coverage/lcov.info -b src/ -o coverage/coverage.xml
          displayName: "Convert lcov to cobertura"

        - task: PublishPipelineArtifact@1
          displayName: "Publish coverage reports"
          name: PublishCoverageReports
          condition: always()
          inputs:
            targetPath: "coverage"
            artifactType: "pipeline"
            artifactName: "vscode-extension-coverage-$(INTEGRATION_TEST_RUN_ID)"

        - task: PublishCodeCoverageResults@1
          condition: always()
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: "coverage/coverage.xml"  

- stage: UiTest
  dependsOn: Build
  jobs:
    - job: Choreo
      displayName: Run UI tests
      timeoutInMinutes: 45

      variables:
        - group: codeserver-cdn-group

      steps:
        - checkout: none

        - task: NodeTool@0
          inputs:
            versionSpec: 16.x

        - download: current
          artifact: PluginBuild

        - task: CopyFiles@2
          inputs:
            SourceFolder: "$(Pipeline.Workspace)/PluginBuild/"
            contents: 'build.zip'
            targetFolder: $(System.DefaultWorkingDirectory)    

        - script: unzip build.zip
          displayName: "Setup workspace"
          
        - script: npm install
          displayName: "Install node modules"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

        - script: |
            wget $(ballerina_deb_url)
            sudo dpkg -i ballerina-$(ballerina_version)-swan-lake-linux-x64.deb
          displayName: "Install Ballerina"

        - script: |
            INTEGRATION_TEST_RUN_ID=$(uuidgen)
            echo "##vso[task.setvariable variable=INTEGRATION_TEST_RUN_ID]${INTEGRATION_TEST_RUN_ID}"
            echo "Generated integration test run id: ${INTEGRATION_TEST_RUN_ID}"
          displayName: "Generate a unique id for the run"

        - script: |
            sudo apt-get install xvfb
            npx extest get-vscode -c 1.68.0 && npx extest get-chromedriver -c 1.68.0 && npx extest install-vsix -f $(ls *.vsix)
            export DISPLAY=:98.0
            Xvfb -ac :98 -screen 0 1920x1080x16 & 
            npm run ui-test
          displayName: "UI Test"

        - task: PublishPipelineArtifact@1
          name: publishScreenshots
          condition: failed()
          displayName: "Publish UI Test Screenshots"
          inputs:
            targetPath: "./test-resources/screenshots/"
            artifactName: Ui-test-screenshots-$(INTEGRATION_TEST_RUN_ID)     

- ${{each stage in parameters.lowCodeTestStages}}:
  - stage: ${{ stage.stage }}
    dependsOn: Build
    displayName: ${{ stage.displayName}}
    jobs:
      - job: Choreo
        displayName: ${{ stage.displayName}}
        timeoutInMinutes: 60

        variables:
          - group: codeserver-cdn-group

        steps:
          - checkout: none
          
          - download: current
            artifact: PluginBuild

          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(Pipeline.Workspace)/PluginBuild/"
              contents: 'build.zip'
              targetFolder: $(System.DefaultWorkingDirectory)   

          - script: unzip build.zip
            displayName: "Setup workspace"
            
          - script: |
              cd ballerina-low-code-editor  
              npm install
            displayName: "Install node modules"
            env:
              NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

          - script: |
              INTEGRATION_TEST_RUN_ID=$(uuidgen)
              echo "##vso[task.setvariable variable=INTEGRATION_TEST_RUN_ID]${INTEGRATION_TEST_RUN_ID}"
              echo "Generated integration test run id: ${INTEGRATION_TEST_RUN_ID}"
            displayName: "Generate a unique id for the run"

          - script: |
              sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            displayName: "Install Cypress Dependencies"

          - script: |
              wget $(ballerina_deb_url)
              sudo dpkg -i ballerina-$(ballerina_version)-swan-lake-linux-x64.deb
            displayName: "Install Ballerina"

          - script: |
              wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
              sudo dpkg -i google-chrome-stable_current_amd64.deb
            displayName: "Install Chrome Stable Version"

          - script: |
              cd ballerina-low-code-editor/integration-tests  
              npm run ${{ stage.command }}
            displayName: "Run Integration Tests"
            
          - task: PublishPipelineArtifact@1
            displayName: 'Publish test fail screenshots'
            name: PublishTestFailScreenshots
            condition: failed()
            inputs:
              targetPath: 'ballerina-low-code-editor/integration-tests/cypress/screenshots'
              artifactName: 'low-code-cypress-screenshots-${{ stage.stage }}-$(INTEGRATION_TEST_RUN_ID)'

          - script: mv ballerina-low-code-editor/integration-tests/.nyc_output/out.json ballerina-low-code-editor/integration-tests/.nyc_output/${{ stage.stage }}.json
            displayName: "Rename code coverage file"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish partial code coverage'
            inputs:
              targetPath: 'ballerina-low-code-editor/integration-tests/.nyc_output/${{ stage.stage }}.json'
              artifactName: PartialCodeCoverage-${{ stage.stage }}   

          - task: PublishPipelineArtifact@1
            displayName: 'Publish test videos'
            name: PublishTestVideos
            condition: always()
            inputs:
              targetPath: 'ballerina-low-code-editor/integration-tests/cypress/videos'
              artifactName: 'low-code-cypress-recordings-${{ stage.stage }}-$(INTEGRATION_TEST_RUN_ID)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish test failure console logs'
            name: PublishFailingConsoleTestsLogs
            condition: failed()
            inputs:
              targetPath: 'ballerina-low-code-editor/integration-tests/logs'
              artifactType: 'pipeline'
              artifactName: 'low-code-cypress-failure-test-logs-${{ stage.stage }}-$(INTEGRATION_TEST_RUN_ID)'
                
- stage: Publish
  dependsOn:
    - Plugintest
    - UItest
    - ${{each stage in parameters.lowCodeTestStages}}:
      - ${{stage.stage}}
  jobs:
    - job: Choreo
      displayName: Publish vsix
      timeoutInMinutes: 15

      variables:
        - group: codeserver-cdn-group

      steps:
        - checkout: none
        
        - task: NodeTool@0
          inputs:
            versionSpec: 16.x

        - download: current
          displayName: 'Download build'
          artifact: PluginBuild

        - task: CopyFiles@2
          inputs:
            SourceFolder: "$(Pipeline.Workspace)/PluginBuild/"
            contents: 'build.zip'
            targetFolder: $(System.DefaultWorkingDirectory)  

        - script: unzip build.zip
          displayName: "Setup workspace"

        - script: |
            cd ballerina-low-code-editor
            npm install
          displayName: "Install node modules"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

        - ${{each stage in parameters.lowCodeTestStages}}:
          - download: current
            displayName: 'Download partial code coverages - ${{ stage.stage }}'
            artifact: PartialCodeCoverage-${{ stage.stage }}

          - task: CopyFiles@2
            displayName: 'Copy coverage files - ${{ stage.stage }}'
            inputs:
              SourceFolder: '$(Pipeline.Workspace)/PartialCodeCoverage-${{ stage.stage }}'
              contents: '${{ stage.stage }}.json'
              targetFolder: $(System.DefaultWorkingDirectory)/coverageData

        - script: |
            cd ballerina-low-code-editor
            npx nyc merge $(System.DefaultWorkingDirectory)/coverageData
            mkdir integration-tests/.nyc_output
            mv coverage.json integration-tests/.nyc_output/out.json
            npx nyc report --reporter html --reporter cobertura -t integration-tests/.nyc_output --report-dir integration-tests/coverage
          condition: always()
          displayName: "Publish total code coverage"

        - task: PublishPipelineArtifact@1
          displayName: 'Publish coverage reports'
          name: PublishCoverageReports
          condition: always()
          inputs:
            targetPath: 'ballerina-low-code-editor/integration-tests/coverage'
            artifactType: 'pipeline'
            artifactName: 'low-code-cypress-coverage'

        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: Cobertura
            summaryFileLocation: 'ballerina-low-code-editor/integration-tests/coverage/cobertura-coverage.xml'

        - script: find . -type f -name 'ballerina-*.vsix' -exec sh -c 'x="{}"; mv "$x" ballerina.vsix' \;
          displayName: "Rename the vsix"

        - script: |
            RELEASE_VERSION_VALUE=$(git describe --tags --abbrev=0)
            echo "##vso[task.setvariable variable=RELEASE_VERSION;isOutput=true]$RELEASE_VERSION_VALUE"
          name: setReleaseTag
          displayName: "Set the release tag"

        - script: |
            echo $(setReleaseTag.RELEASE_VERSION)

        - script: |
            createResponse=`curl -X POST  -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization:token $(NPM_ACCESS_TOKEN)" -d '{"tag_name":"$(setReleaseTag.RELEASE_VERSION)", \
            "draft":false, "name": "Release $(setReleaseTag.RELEASE_VERSION)", "prerelease":true}' \
            https://api.github.com/repos/wso2/ballerina-plugin-vscode/releases` \
            && id=`echo "$createResponse" | sed -n -e 's/"id":\ \([0-9]\+\),/\1/p' | head -n 1 | sed 's/[[:blank:]]//g'` && \
            uploadResponse=`curl -X POST -H "Authorization:token $(NPM_ACCESS_TOKEN)" -H "Content-Type:application/octet-stream" \
              --data-binary @ballerina.vsix \
              https://uploads.github.com/repos/wso2/ballerina-plugin-vscode/releases/$id/assets?name=ballerina.vsix`
          displayName: "Release vsix"
          env:
            NPM_ACCESS_TOKEN: $(NPM_ACCESS_TOKEN)

        - script: |
            npm version prepatch --preid=$(setReleaseTag.RELEASE_VERSION) --workspaces
            npm publish --tag next --workspaces
          env:
            NODE_AUTH_TOKEN: $(NPM_ACCESS_TOKEN)

        - script: |
            body=$(cat << EOF
            {
              "cards": [
                {
                  "sections": [
                    {
                      "widgets": [
                        {
                          "keyValue": {
                            "topLabel": "New Release",
                            "content": "$(setReleaseTag.RELEASE_VERSION)",
                            "onClick": {
                              "openLink": {
                                "url": "https://github.com/wso2/ballerina-plugin-vscode/releases/tag/$(setReleaseTag.RELEASE_VERSION)"
                              }
                            },
                            "iconUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Visual_Studio_Code_1.35_icon.svg/512px-Visual_Studio_Code_1.35_icon.svg.png",
                            "button": {
                              "textButton": {
                                "text": "Download VSIX",
                                "onClick": {
                                  "openLink": {
                                    "url": "https://github.com/wso2/ballerina-plugin-vscode/releases/download/$(setReleaseTag.RELEASE_VERSION)/ballerina.vsix"
                                  }
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
            EOF
            )
            curl \
              -X POST \
              -H 'Content-Type: application/json' \
              "https://chat.googleapis.com/v1/spaces/AAAAtkMpL8k/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=GmcsSshpc6BD68bOPu4wadJ0WjQLbDQBag3zwYPBoZ0%3D" \
              -d "$body"
          displayName: "Release Notification"

        - script: |
            payload='{ "version" : "$(setReleaseTag.RELEASE_VERSION)" }'
            echo $payload
            curl -v --header "Content-Type: application/json" \
            --request POST \
            --data "$payload" \
            https://dev.azure.com/choreo-devops/_apis/public/distributedtask/webhooks/ballerina-code-server-build-trigger?api-version=6.0-preview
          displayName: "Trigger code-server build"

- stage: Error
  condition: failed()     
  jobs:
    - job: Choreo   
      steps:
        - template: hangouts-notify.yml@common-templates
          parameters:
            organizationName: wso2-choreo
            webhookUrl: https://chat.googleapis.com/v1/spaces/AAAAtkMpL8k/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=GmcsSshpc6BD68bOPu4wadJ0WjQLbDQBag3zwYPBoZ0%3D
