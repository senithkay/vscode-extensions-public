parameters:
- name: ballerina_dist_uri
  displayName: Ballerina distrbution deb uri
  type: string
  default: https://dist.ballerina.io/downloads/2201.2.1/ballerina-2201.2.1-swan-lake-linux-x64.deb
- name: ballerina_dist_name
  displayName: Ballerina distrbution deb name
  type: string
  default: ballerina-2201.2.1-swan-lake-linux-x64.deb

trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
    - repository: BALLERINA_LOW_CODE_EDITOR
      type: github
      name: wso2-enterprise/ballerina-low-code-editor
      ref: refs/heads/low-code-build
      endpoint: choreo-cicd-committer

jobs:
  - job: Choreo
    displayName: Choreo Job
    timeoutInMinutes: 120
    steps:
      - script: |
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
        displayName: "Install Cypress Depencies"

      - script: |
          wget ${{parameters.ballerina_dist_uri}}
          sudo dpkg -i ${{parameters.ballerina_dist_name}}
        displayName: "Install Ballerina"

      - script: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
        displayName: "Install Chrome Stable Version"

      - task: NodeTool@0
        inputs:
          versionSpec: 16.x

      - task: npmAuthenticate@0
        inputs:
          workingFile: .azure/.npmrc
          customEndpoint: npm-connection
        env:
          NODE_AUTH_TOKEN: $(NPM_ACCESS_TOKEN)

      - script: npm run build
        displayName: "Build repo"

      - script: |
          INTEGRATION_TEST_RUN_ID=$(uuidgen)
        displayName: "Generate a unique ID for test run"

      - script: npm test
        displayName: "Run Integration Tests"

      - task: PublishPipelineArtifact@1
        displayName: "Publish test fail screenshots"
        name: PublishTestFailScreenshots
        condition: failed()
        inputs:
          targetPath: "integration-tests/cypress/screenshots"
          artifactName: "low-code-cypress-screenshots-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishPipelineArtifact@1
        displayName: "Publish coverage reports"
        name: PublishCoverageReports
        condition: always()
        inputs:
          targetPath: "integration-tests/coverage"
          artifactType: "pipeline"
          artifactName: "low-code-cypress-coverage-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishCodeCoverageResults@1
        condition: always()
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "integration-tests/coverage/cobertura-coverage.xml"

      - task: PublishPipelineArtifact@1
        displayName: "Publish test videos"
        name: PublishTestVideos
        condition: always()
        inputs:
          targetPath: "integration-tests/cypress/videos"
          artifactName: "low-code-cypress-recordings-$(INTEGRATION_TEST_RUN_ID)"

      - script: |
          TAG="$(date +'%Y%m%d-%H%M')"
          echo "##vso[task.setvariable variable=TAG]${TAG}"
          echo "Generated Docker tag: ${TAG}"
        displayName: "Generate low-code release tag"

      - script: |
          echo "##vso[task.setvariable variable=TAG_NAME;isOutput=true]$(TAG)"
        name: setTag

      - script: |
          npm set //npm.pkg.github.com/:_authToken $NODE_AUTH_TOKEN
          npm version prepatch --preid=$(TAG) --workspaces
          npm publish --tag latest --workspaces
        displayName: "Release low-code editor"

      - script: |
          GIT_TAG=$(git describe --tags --abbrev=0)
          echo "##vso[task.setvariable variable=GIT_TAG_NAME;isOutput=true]$GIT_TAG"
        name: setGitTag

      - script: |
          echo $(setTag.TAG_NAME)
          echo $(setGitTag.GIT_TAG_NAME)

  - job: Commit
    displayName: Commit build details
    dependsOn: ["Choreo"]
    variables:
      TAG: $[ dependencies.Choreo.outputs['setTag.TAG_NAME'] ]
      GIT_TAG: $[ dependencies.Choreo.outputs['setGitTag.GIT_TAG_NAME'] ]
    steps:
      - checkout: BALLERINA_LOW_CODE_EDITOR
        persistCredentials: true

      - script: |
          git config --global user.email "choreo-cicd@wso2.com"
          git config --global user.name "Choreo CI Agent"
          git status
          echo "Update build.txt"
          echo "$(GIT_TAG)"
          echo "$(TAG)"
          echo "$GIT_TAG $(TAG)" >> build.txt
          git add build.txt
          git commit -m "Update build details for $GIT_TAG"
          git push origin HEAD:low-code-build
          git checkout origin/main
        displayName: "Update low-code-build branch new build details"
