trigger:
  batch: true
  branches:
    include:
      - refs/tags/v*

pr: none

pool:
  vmImage: "ubuntu-latest"

jobs:
  - job: Choreo
    displayName: Choreo Job
    timeoutInMinutes: 120
    steps:
      - script: |
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
        displayName: "Install Cypress Depencies"

      - script: |
          curl -s https://api.github.com/repos/ballerina-platform/ballerina-distribution/releases | grep -wo -m1 "https.*ballerina-linux-installer-x64-swan-lake-.*deb" | wget -qi - -O ballerina.deb && \
          sudo dpkg -i ballerina.deb
        displayName: "Install Ballerina"

      - script: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
        displayName: "Install Chrome Stable Version"

      - task: NodeTool@0
        inputs:
          versionSpec: 16.x

      - script: npm run build
        displayName: "Build repo"

      - script: |
          INTEGRATION_TEST_RUN_ID=$(uuidgen)
        displayName: "Generate a unique ID for test run"

      - script: npm test
        displayName: "Run Integration Tests"

      - task: PublishPipelineArtifact@1
        displayName: "Publish test fail screenshots"
        name: PublishTestFailScreenshots
        condition: failed()
        inputs:
          targetPath: "integration-tests/cypress/screenshots"
          artifactName: "low-code-cypress-screenshots-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishPipelineArtifact@1
        displayName: "Publish coverage reports"
        name: PublishCoverageReports
        condition: always()
        inputs:
          targetPath: "integration-tests/coverage"
          artifactType: "pipeline"
          artifactName: "low-code-cypress-coverage-$(INTEGRATION_TEST_RUN_ID)"

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "integration-tests/coverage/cobertura-coverage.xml"

      - task: PublishPipelineArtifact@1
        displayName: "Publish test videos"
        name: PublishTestVideos
        condition: always()
        inputs:
          targetPath: "integration-tests/cypress/videos"
          artifactName: "low-code-cypress-recordings-$(INTEGRATION_TEST_RUN_ID)"

      - script: |
          TAG="$(date +'%Y%m%d-%H%M')"
          echo "##vso[task.setvariable variable=TAG]${TAG}"
          echo "Generated Docker tag: ${TAG}"
        displayName: "Generate low-code release tag"

      - script: |
          npm version prepatch --preid=$(TAG) --workspaces
          npm publish --tag latest --workspaces
        displayName: "Release low-code editor"

      - script: |
          $tags = git tag --sort=-creatordate
          $GIT_TAG = $tags[0]
          git config --global user.email "choreo-cicd@wso2.com"
          git config --global user.name "Choreo CI Agent"
          echo "git status"
          git status
          echo "Update build.txt"
          echo "$(GIT_TAG) $(TAG)" >> build.txt
          git add build.txt
          git commit -m "Update build details for $(GIT_TAG)"
          git push origin HEAD:low-code-build
          git checkout origin/main
        displayName: "Update low-code-build branch new build details"
