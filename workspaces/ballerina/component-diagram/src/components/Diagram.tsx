/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 LLC. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
 * You may not alter or remove any copyright or other notice from copies of this content.
 */

import React, { useState, useEffect } from "react";
import { DiagramEngine, DiagramModel } from "@projectstorm/react-diagrams";
import { CanvasWidget } from "@projectstorm/react-canvas-core";
import {
    autoDistribute,
    calculateEntryNodeHeight,
    createNodesLink,
    createPortNodeLink,
    generateEngine,
    sortItems,
} from "../utils/diagram";
import { DiagramCanvas } from "./DiagramCanvas";
import { NodeModel } from "../utils/types";
import { NodeLinkModel } from "./NodeLink";
import { OverlayLayerModel } from "./OverlayLayer";
import { DiagramContextProvider, DiagramContextState } from "./DiagramContext";
import Controls from "./Controls";
import {
    CDAutomation,
    CDConnection,
    CDFunction,
    CDListener,
    CDModel,
    CDService,
    CDResourceFunction,
} from "@wso2-enterprise/ballerina-core";
import { EntryNodeModel, VIEW_ALL_RESOURCES_PORT_NAME } from "./nodes/EntryNode";
import { ListenerNodeModel } from "./nodes/ListenerNode";
import { ConnectionNodeModel } from "./nodes/ConnectionNode";

export interface DiagramProps {
    project: CDModel;
    onListenerSelect: (listener: CDListener) => void;
    onServiceSelect: (service: CDService) => void;
    onFunctionSelect: (func: CDFunction | CDResourceFunction) => void;
    onAutomationSelect: (automation: CDAutomation) => void;
    onConnectionSelect: (connection: CDConnection) => void;
    onDeleteComponent: (component: CDListener | CDService | CDAutomation | CDConnection) => void;
}

export function Diagram(props: DiagramProps) {
    const {
        project,
        onListenerSelect,
        onServiceSelect,
        onFunctionSelect,
        onAutomationSelect,
        onConnectionSelect,
        onDeleteComponent,
    } = props;
    const [diagramEngine] = useState<DiagramEngine>(generateEngine());
    const [diagramModel, setDiagramModel] = useState<DiagramModel | null>(null);
    const [showControls, setShowControls] = useState(false);

    useEffect(() => {
        if (diagramEngine) {
            const { nodes, links } = getDiagramData();
            drawDiagram(nodes, links);
            autoDistribute(diagramEngine);
        }
    }, [project]);

    useEffect(() => {
        const handleResize = () => {
            if (diagramEngine?.getCanvas()?.getBoundingClientRect) {
                diagramEngine.zoomToFitNodes({ margin: 40, maxZoom: 1 });
                diagramEngine.repaintCanvas();
            }
        };

        window.addEventListener("resize", handleResize);
        return () => {
            window.removeEventListener("resize", handleResize);
        };
    }, [diagramEngine, diagramModel]);

    const getDiagramData = () => {
        const nodes: NodeModel[] = [];
        const links: NodeLinkModel[] = [];

        // filtered autogenerated connections
        const filteredConnections = project.connections?.filter((connection) => !connection.symbol?.startsWith("_"));
        // Sort and create connections
        const sortedConnections = sortItems(filteredConnections || []) as CDConnection[];
        sortedConnections.forEach((connection, index) => {
            const node = new ConnectionNodeModel(connection);
            // Set initial Y position for connections
            node.setPosition(0, 100 + index * 100);
            nodes.push(node);
        });

        let startY = 100;

        // Sort services by sortText before creating nodes
        const sortedServices = sortItems(project.services || []) as CDService[];
        sortedServices.forEach((service, index) => {
            // Calculate height based on visible functions
            const totalFunctions = service.remoteFunctions.length + service.resourceFunctions.length;
            const hasMoreFunctionsForHeight = totalFunctions > 2;
            const visibleFunctionCount = hasMoreFunctionsForHeight ? 5 : totalFunctions;
            const nodeHeight = calculateEntryNodeHeight(visibleFunctionCount);

            // Create entry node with calculated height
            const node = new EntryNodeModel(service, "service");
            node.height = nodeHeight;
            node.setPosition(0, startY);
            nodes.push(node);

            startY += nodeHeight + 16;

            // Determine visible and hidden functions
            const serviceFunctions = [];
            if (service.remoteFunctions?.length > 0) {
                serviceFunctions.push(...service.remoteFunctions);
            }
            if (service.resourceFunctions?.length > 0) {
                serviceFunctions.push(...service.resourceFunctions);
            }

            const hasMoreFunctions = serviceFunctions.length > 3;
            const visibleFunctions = serviceFunctions.slice(0, hasMoreFunctions ? 2 : serviceFunctions.length);
            const hiddenFunctions = hasMoreFunctions ? serviceFunctions.slice(2) : [];

            // Create connections for visible functions
            visibleFunctions.forEach((func) => {
                func.connections?.forEach((connectionUuid) => {
                    const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                    if (connectionNode) {
                        const port = node.getFunctionPort(func);
                        if (port) {
                            const link = createPortNodeLink(port, connectionNode);
                            if (link) {
                                links.push(link);
                            }
                        }
                    }
                });
            });

            // Create connections for hidden functions to the view all resources port
            if (hiddenFunctions.length > 0) {
                const viewAllPort = node.getViewAllResourcesPort();
                hiddenFunctions.forEach((func) => {
                    func.connections?.forEach((connectionUuid) => {
                        const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                        if (connectionNode && viewAllPort) {
                            const link = createPortNodeLink(viewAllPort, connectionNode);
                            if (link) {
                                links.push(link);
                            }
                        }
                    });
                });
            }
        });

        // create automation
        const automation = project.automation;
        if (automation) {
            const automationNode = new EntryNodeModel(automation, "automation");
            nodes.push(automationNode);
            // link connections
            automation.connections.forEach((connectionUuid) => {
                const connectionNode = nodes.find((node) => node.getID() === connectionUuid);
                if (connectionNode) {
                    const link = createNodesLink(automationNode, connectionNode);
                    if (link) {
                        links.push(link);
                    }
                }
            });
        }

        // create listeners
        project.listeners?.forEach((listener) => {
            const node = new ListenerNodeModel(listener);
            nodes.push(node);
            // link services
            listener.attachedServices.forEach((serviceUuid) => {
                const serviceNode = nodes.find((node) => node.getID() === serviceUuid);
                if (serviceNode) {
                    const link = createNodesLink(node, serviceNode);
                    if (link) {
                        links.push(link);
                    }
                }
            });
        });

        return { nodes, links };
    };

    const drawDiagram = (nodes: NodeModel[], links: NodeLinkModel[]) => {
        const newDiagramModel = new DiagramModel();
        newDiagramModel.addLayer(new OverlayLayerModel());
        // add nodes and links to the diagram
        newDiagramModel.addAll(...nodes, ...links);

        diagramEngine.setModel(newDiagramModel);
        setDiagramModel(newDiagramModel);
        // registerListeners(diagramEngine);

        diagramEngine.setModel(newDiagramModel);

        // diagram paint with timeout
        setTimeout(() => {
            // remove loader overlay layer
            const overlayLayer = diagramEngine
                .getModel()
                .getLayers()
                .find((layer) => layer instanceof OverlayLayerModel);
            if (overlayLayer) {
                diagramEngine.getModel().removeLayer(overlayLayer);
            }
            if (diagramEngine?.getCanvas()?.getBoundingClientRect) {
                diagramEngine.zoomToFitNodes({ margin: 40, maxZoom: 1 });
            }
            diagramEngine.repaintCanvas();
        }, 200);
    };

    const context: DiagramContextState = {
        project,
        onListenerSelect,
        onServiceSelect,
        onFunctionSelect,
        onAutomationSelect,
        onConnectionSelect,
        onDeleteComponent,
    };

    return (
        <>
            <Controls engine={diagramEngine} />

            {diagramEngine && diagramModel && (
                <DiagramContextProvider value={context}>
                    <DiagramCanvas
                        onMouseEnter={() => setShowControls(true)}
                        onMouseLeave={() => setShowControls(false)}
                    >
                        <CanvasWidget engine={diagramEngine} />
                    </DiagramCanvas>
                </DiagramContextProvider>
            )}
        </>
    );
}
