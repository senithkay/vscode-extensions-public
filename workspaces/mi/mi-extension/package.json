{
  "name": "micro-integrator",
  "displayName": "Micro Integrator",
  "description": "An extension which gives a development environment for designing, developing, debugging, and testing integration solutions.",
  "version": "0.9.0",
  "publisher": "wso2",
  "engines": {
    "vscode": "^1.81.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:SynapseXml",
    "workspaceContains:.project",
    "workspaceContains:pom.xml",
    "onDebugResolve:mi",
    "onDebugDynamicConfigurations:mi"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "SynapseXml",
        "extensions": [
          ".xml"
        ]
      }
    ],
    "grammars": [
      {
        "language": "SynapseXml",
        "scopeName": "synapse.xml",
        "path": "./syntaxes/xml.tmLanguage.json"
      }
    ],
    "breakpoints": [
      {
          "language": "SynapseXml"
      }
  ],
    "debuggers": [
      {
        "type": "mi",
        "label": "MI: Run and Debug",
        "runtime": "node",
        "languages": [
          "SynapseXml"
        ],
        "configurationAttributes": {
          "launch": {}
        },
        "initialConfigurations": [
          {
            "type": "mi",
            "name": "MI: Run and Debug",
            "request": "launch"
          }
        ]
      }
    ],
    "configuration": [
      {
        "type": "object",
        "title": "Integration Studio",
        "properties": {
          "integrationStudio.rootUrl": {
            "type": "string",
            "default": "https://e95488c8-8511-4882-967f-ec3ae2a0f86f-prod.e1-us-east-azure.choreoapis.dev/miaideployments/micopilot/mi-copilot-backend-be2/v1.0",
            "description": "Root URL for Backend Services\n Default: https://e95488c8-8511-4882-967f-ec3ae2a0f86f-prod.e1-us-east-azure.choreoapis.dev/miaideployments/micopilot/mi-copilot-backend-be2/v1.0"
          },
          "integrationStudio.authOrg": {
            "type": "string",
            "default": "wso2mi",
            "description": "Asgardeo Organization for Auth Services\nDefault: wso2mi"
          },
          "integrationStudio.authClientID": {
            "type": "string",
            "default": "rTEgoRFEQMc1baXcsO6_AU1ugjAa",
            "description": "Client ID of the Asgardeo Organization for Auth Services\n Default: rTEgoRFEQMc1baXcsO6_AU1ugjAa"
          },
          "integrationStudio.authRedirectURL": {
            "type": "string",
            "default": "https://mi-copilot.wso2.com/vscode-auth",
            "description": "Redirect URL for Auth Service \n Default: https://mi-copilot.wso2.com/vscode-auth"
          }
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "micro-integrator",
          "title": "Micro Integrator",
          "icon": "assets/icon.svg"
        }
      ]
    },
    "views": {
      "micro-integrator": [
        {
          "id": "MI.project-explorer",
          "name": "Project Explorer"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "MI.project-explorer",
        "contents": "Loading...",
        "when": "MI.status != 'unknownProject' && MI.status != 'projectLoaded' && MI.status != 'disabled'"
      },
      {
        "view": "MI.project-explorer",
        "contents": "Welcome to Micro Integrator. You can open a folder containing a MI project or create a new project.\n[Open MI Project](command:MI.openProject)\n[Create New Project](command:MI.project-explorer.create-project)\nTo learn more about how to use Micro Integrator in VS Code, [read our docs](https://ei.docs.wso2.com).",
        "when": "MI.status == 'unknownProject'"
      },
      {
        "view": "MI.project-explorer",
        "contents": "This project appears to have been created with Integration Studio. Please note that the VS Code extension offers limited support for these projects. To enhance compatibility, consider migrating your project using the provided migration tool.\n[Migrate Project](command:MI.migrateProject)",
        "when": "MI.status == 'projectLoaded' && MI.projectType == 'oldProject'"
      },
      {
        "view": "MI.project-explorer",
        "contents": "Some errors occured while activating the extension. Please check the output channel for more information.",
        "when": "MI.status == 'disabled'"
      }
    ],
    "commands": [
      {
        "command": "MI.openProject",
        "title": "Open Project",
        "category": "MI"
      },
      {
        "command": "MI.openWelcome",
        "title": "Open MI Welcome",
        "category": "MI"
      },
      {
        "command": "MI.showOverview",
        "title": "Show Overview",
        "category": "MI"
      },
      {
        "command": "MI.openAiPanel",
        "title": "Open AI Panel",
        "category": "MI",
        "icon": "$(wand)"
      },
      {
        "command": "MI.project-explorer.add",
        "title": "Add Construct",
        "icon": "$(add)",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.refresh",
        "title": "Refresh Project Explorer",
        "icon": "$(refresh)",
        "group": "navigation"
      },
      {
        "command": "MI.project-explorer.add-api",
        "title": "Add API",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.create-project",
        "title": "Create New Project",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.open-project-overview",
        "title": "Open Project Overview",
        "icon": "$(list-unordered)",
        "when": "false"
      },
      {
        "command": "MI.project-explorer.import-project",
        "title": "Import Project",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.open-service-designer",
        "title": "Open Service Designer",
        "icon": "$(distro-design-view)",
        "when": "false"
      },
      {
        "command": "MI.project-explorer.open-service-designer-beside",
        "title": "Open Service Designer",
        "icon": "$(distro-design-view)"
      },
      {
        "command": "MI.project-explorer.add-endpoint",
        "title": "Add Endpoint",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-sequence",
        "title": "Add Sequence",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-inbound-endpoint",
        "title": "Add Inbound Endpoint",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-message-processor",
        "title": "Add Message Processor",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-proxy-service",
        "title": "Add Proxy Service",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-template",
        "title": "Add Template",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-local-entry",
        "title": "Add Local Entry",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-registry-resource",
        "title": "Add Registry Resource",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.delete-reg-resource",
        "title": "Delete Registry Resource",
        "icon": "$(notebook-delete-cell)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-class-mediator",
        "title": "Add Class Mediator",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-task",
        "title": "Add Scheduled Task",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-message-store",
        "title": "Add Message Store",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "MI.project-explorer.add-data-source",
        "title": "Add Data Source",
        "icon": "$(add)",
        "group": "navigation",
        "category": "MI"
      },
      {
        "command": "project-explorer.view",
        "title": "View"
      },
      {
        "command": "MI.show.source",
        "title": "Show Source",
        "icon": "$(code)",
        "category": "MI"
      },
      {
        "command": "MI.change.server",
        "title": "Add MI server",
        "category": "MI"
      },
      {
        "command": "MI.build-project",
        "title": "Build",
        "category": "MI"
      },
      {
        "command": "MI.build-and-run",
        "title": "Build and Run",
        "icon": "$(debug-start)",
        "category": "MI"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "MI.project-explorer.open-service-designer",
          "when": "false"
        },
        {
          "command": "MI.project-explorer.open-service-designer-beside",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "MI.project-explorer.refresh",
          "when": "view == MI.project-explorer && projectOpened",
          "group": "navigation"
        },
        {
          "command": "MI.project-explorer.add",
          "when": "view == MI.project-explorer && projectOpened",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "MI.build-and-run",
          "group": "navigation@1",
          "when": "MI.status == 'projectLoaded' && (isVisualizerActive || resourceLangId == SynapseXml)",
          "title": "Build and Run Project"
        },
        {
          "command": "MI.openAiPanel",
          "group": "navigation@1",
          "when": "MI.projectType == 'miProject' && (isVisualizerActive || resourceLangId == SynapseXml)",
          "title": "Open AI Panel"
        },
        {
          "command": "MI.project-explorer.open-service-designer-beside",
          "when": "MI.status == 'projectLoaded' && (isVisualizerActive || resourceLangId == SynapseXml)",
          "group": "navigation@3"
        },
        {
          "command": "MI.show.source",
          "when": "isVisualizerActive && showGoToSource",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "MI.project-explorer.open-project-overview",
          "when": "viewItem == project",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-api",
          "when": "view == MI.project-explorer && viewItem == apis",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.open-service-designer",
          "when": "viewItem == api",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-endpoint",
          "when": "view == MI.project-explorer && viewItem == endpoints",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-sequence",
          "when": "view == MI.project-explorer && viewItem == sequences",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-inbound-endpoint",
          "when": "view == MI.project-explorer && viewItem == inboundEndpoints",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-local-entry",
          "when": "view == MI.project-explorer && viewItem == localEntries",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-registry-resource",
          "when": "view == MI.project-explorer && viewItem == registry",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.delete-reg-resource",
          "when": "view == MI.project-explorer && (viewItem == registry-folder || viewItem == registry-file)",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-class-mediator",
          "when": "view == MI.project-explorer && viewItem == class-mediator",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-message-processor",
          "when": "view == MI.project-explorer && viewItem == messageProcessors",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-proxy-service",
          "when": "view == MI.project-explorer && viewItem == proxyServices",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-task",
          "when": "view == MI.project-explorer && viewItem == tasks",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-message-store",
          "when": "view == MI.project-explorer && viewItem == messageStores",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-data-source",
          "when": "view == MI.project-explorer && viewItem == dataSources",
          "group": "inline"
        },
        {
          "command": "MI.project-explorer.add-template",
          "when": "view == MI.project-explorer && viewItem == templates",
          "group": "inline"
        }
      ]
    },
    "icons": {
      "distro-design-view": {
        "description": "design-view",
        "default": {
          "fontPath": "./resources/font-wso2-vscode/dist/wso2-vscode.woff",
          "fontCharacter": "\\f116"
        }
      }
    }
  },
  "scripts": {
    "clean": "rimraf ./dist",
    "compile": "tsc -p .",
    "watch": "tsc -p . -w",
    "package": "if [ $isPreRelease = true ]; then vsce package --no-dependencies --pre-release; else vsce package --no-dependencies; fi",
    "build": "pnpm clean && pnpm run copyLSLibs && pnpm run copyFonts && webpack --mode production --devtool hidden-source-map && pnpm run package && pnpm run postbuild",
    "compile-tests": "pnpm run compile",
    "watch-tests": "pnpm run watch",
    "pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
    "lint": "eslint src --ext ts",
    "test": "pnpm run pretest && node ./out/test/runTest.js",
    "e2e-test-setup": "npx extest get-vscode -c 1.81.1 && npx extest get-chromedriver -c 1.81.1 && npx extest install-vsix -f $(ls vsix/*.vsix)",
    "e2e-test": "pnpm run compile-tests && pnpm exec playwright test",
    "copyFonts": "copyfiles -f ./node_modules/@wso2-enterprise/font-wso2-vscode/dist/* ./resources/font-wso2-vscode/dist/",
    "copyLSLibs": "copyfiles -f language-server/org.eclipse.lemminx/target/*.jar ls",
    "copyVSIX": "copyfiles *.vsix ./vsix",
    "copyVSIXToRoot": "copyfiles -f ./vsix/* ../../..",
    "postbuild": "pnpm run copyVSIX"
  },
  "devDependencies": {
    "@types/vscode": "^1.81.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^6.4.1",
    "@typescript-eslint/parser": "^6.4.1",
    "eslint": "^8.47.0",
    "glob": "^10.3.3",
    "mocha": "^10.2.0",
    "typescript": "^5.1.6",
    "ts-loader": "^9.4.4",
    "webpack": "^5.88.2",
    "webpack-cli": "^5.1.4",
    "@vscode/test-electron": "^2.3.4",
    "rimraf": "~5.0.5",
    "@wso2-enterprise/mi-visualizer": "workspace:*",
    "@wso2-enterprise/mi-rpc-client": "workspace:*",
    "ts-morph": "^22.0.0",
    "await-notify": "^1.0.1"
  },
  "dependencies": {
    "copyfiles": "^2.4.1",
    "@vscode/vsce": "~2.21.0",
    "vscode-messenger": "^0.4.5",
    "vscode-messenger-common": "^0.4.5",
    "@wso2-enterprise/mi-core": "workspace:*",
    "@wso2-enterprise/mi-rpc-client": "workspace:*",
    "@playwright/test": "~1.37.1",
    "@wso2-enterprise/playwright-vscode-tester": "workspace:*",
    "vscode-extension-tester": "~5.9.1",
    "vscode-languageclient": "^8.0.2",
    "@types/xml2js": "~0.4.12",
    "jsonix": "~3.0.0",
    "lodash": "~4.17.21",
    "axios": "~1.5.1",
    "@types/lodash": "~4.14.199",
    "vscode-languageserver-protocol": "^3.17.2",
    "fast-xml-parser": "~4.3.2",
    "@wso2-enterprise/mi-syntax-tree": "workspace:*",
    "@wso2-enterprise/font-wso2-vscode": "workspace:*",
    "xstate": "^4.38.3",
    "node-fetch": "~2.6.2",
    "mustache": "~4.2.0",
    "@types/mustache": "~4.2.5",
    "uuid": "~9.0.1",
    "unzipper": "~0.10.14",
    "vscode-debugadapter": "^1.51.0",
    "vscode-debugprotocol": "^1.51.0",
    "tree-kill": "^1.2.2",
    "node-loader": "~2.0.0",
    "to-json-schema": "0.2.4",
    "xml2js":"0.6.2",
    "tmp":"~0.2.3",
    "fs-extra":"~11.2.0",
    "@types/tmp":"~0.2.6",
    "@types/fs-extra":"~11.0.4",
    "json-schema-to-ts":"3.0.1",
    "@babel/plugin-transform-typescript": "^7.16.1",
    "recast": "^0.20.5",
    "@babel/core": "^7.24.4",
    "@types/json-schema":"7.0.15",
    "json-schema":"0.4.0",
    "prettier":"3.2.5",
    "@apidevtools/json-schema-ref-parser":"11.6.1",
    "js-yaml":"4.1.0"
  }
}
