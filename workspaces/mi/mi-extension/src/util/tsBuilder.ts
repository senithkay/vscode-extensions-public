/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 LLC. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
 * You may not alter or remove any copyright or other notice from copies of this content.
 * 
 */

import { compile } from './../datamapper/schema-to-typescript';
import * as fs from "fs";
import path = require("path");
import { Uri, workspace } from "vscode";
import { convertTypeScriptToJavascript, convertToJSONSchema } from './schemaBuilder';
import { JSONSchema3or4 } from 'to-json-schema';

export function generateTSInterfacesFromSchemaFile(schema: JSONSchema3or4): Promise<string> {
    const ts = compile(schema, "Schema", {bannerComment: ""});
    return ts;
}

export async function updateDMC(dmName:string, sourcePath: string): Promise<string> {
    const workspaceFolder = workspace.getWorkspaceFolder(Uri.file(sourcePath));
    if (workspaceFolder) {
        const dataMapperConfigFolder = path.join(
            workspaceFolder.uri.fsPath,  'src', 'main', 'wso2mi', 'resources', 'registry', 'gov', 'datamapper');
        const tsFilepath = path.join(dataMapperConfigFolder, dmName, `${dmName}.ts`);
        const inputSchemaPath = path.join(dataMapperConfigFolder, dmName,  `${dmName}_inputSchema.json`);
        const outputSchemaPath = path.join(dataMapperConfigFolder, dmName, `${dmName}_outputSchema.json`);
        const dmcFilePath = path.join(dataMapperConfigFolder, dmName, `${dmName}.dmc`);

        let tsContent = "";

        const inputSchemaContent = fs.readFileSync(inputSchemaPath, 'utf8');
        const outputSchemaContent = fs.readFileSync(outputSchemaPath, 'utf8');
        const inputSchema:JSONSchema3or4 = convertToJSONSchema(inputSchemaContent);
        const outputSchema:JSONSchema3or4 = convertToJSONSchema(outputSchemaContent);
        const inputSchemaTitle = inputSchema.title || "InputRoot";
        const outputSchemaTitle = outputSchema.title || "OutputRoot";
        const isInputArray = inputSchema.type === "array";
        const isOutputArray = outputSchema.type === "array";

        if (isInputArray && inputSchema.items && inputSchema.items.length > 0) {
            inputSchema.type = "object";
            inputSchema.properties = inputSchema.items[0].properties;
        }

        if (isOutputArray && outputSchema.items && outputSchema.items.length > 0) {
            outputSchema.type = "object";
            outputSchema.properties = outputSchema.items[0].properties;
        }

        const inputTSInterfaces = inputSchemaContent.length > 0 
            ? await generateTSInterfacesFromSchemaFile(inputSchema) 
            : "interface InputRoot {\n}\n\n";

        const outputTSInterfaces = outputSchemaContent.length > 0 
            ? await generateTSInterfacesFromSchemaFile(outputSchema) 
            : "interface OutputRoot {\n}\n\n";

        tsContent += `${inputTSInterfaces}\n${outputTSInterfaces}\nfunction mapFunction(input: InputRoot${isInputArray ? "[]" : ""}): OutputRoot${isOutputArray ? "[]" : ""} {\n`;
        tsContent += `\treturn ${isOutputArray ? "[" : ""}{}${isOutputArray ? "]" : ""}\n}\n\n`;
        tsContent += `// WARNING: Do not edit/remove below function\nfunction map_S_${inputSchemaTitle}_S_${outputSchemaTitle}() {\n\treturn mapFunction(input${inputSchemaTitle});\n}\n`;
        fs.writeFileSync(tsFilepath, tsContent);
        const jsContent = convertTypeScriptToJavascript(tsContent);
        fs.writeFileSync(dmcFilePath, jsContent);
    }
    return "";
}

export async function updateDMCContent(dmName:string, sourcePath: string): Promise<string> {
    const workspaceFolder = workspace.getWorkspaceFolder(Uri.file(sourcePath));
    if (workspaceFolder) {
        const dataMapperConfigFolder = path.join(
            workspaceFolder.uri.fsPath,  'src', 'main', 'wso2mi', 'resources', 'registry', 'gov', 'datamapper');
        const tsFilepath = path.join(dataMapperConfigFolder, dmName, `${dmName}.ts`);
        const dmcFilePath = path.join(dataMapperConfigFolder, dmName, `${dmName}.dmc`);
        const tsContent = fs.readFileSync(tsFilepath, 'utf8');
        let jsContent = "// WARNING: This file has been auto-generated. Do not edit this file, as any changes will be overwritten.\n\n";
        jsContent += convertTypeScriptToJavascript(tsContent);
        fs.writeFileSync(dmcFilePath, jsContent);
    }
    return "";
}