/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 LLC. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
 * You may not alter or remove any copyright or other notice from copies of this content.
 * 
 */

import { compile } from './../datamapper/schema-to-typescript';
import * as fs from "fs";
import path = require("path");
import { Uri, workspace } from "vscode";
import { convertTypeScriptToJavascript, convertToJSONSchema } from './schemaBuilder';
import { JSONSchema3or4 } from 'to-json-schema';

export function generateTSInterfacesFromSchemaFile(schema: JSONSchema3or4): Promise<string> {
    const ts = compile(schema, "Schema", { bannerComment: "" });
    return ts;
}

export async function updateDMC(dmName: string, sourcePath: string): Promise<string> {
    const workspaceFolder = workspace.getWorkspaceFolder(Uri.file(sourcePath));
    if (workspaceFolder) {
        const dataMapperConfigFolder = path.join(
            workspaceFolder.uri.fsPath, 'src', 'main', 'wso2mi', 'resources', 'registry', 'gov', 'datamapper');
        const tsFilepath = path.join(dataMapperConfigFolder, dmName, `${dmName}.ts`);
        const inputSchemaPath = path.join(dataMapperConfigFolder, dmName, `${dmName}_inputSchema.json`);
        const outputSchemaPath = path.join(dataMapperConfigFolder, dmName, `${dmName}_outputSchema.json`);
        const dmcFilePath = path.join(dataMapperConfigFolder, dmName, `${dmName}.dmc`);

        let tsContent = "";

        const readAndConvertSchema = async (schemaPath: string, defaultTitle: string) => {
            const schemaContent = fs.readFileSync(schemaPath, 'utf8');
            const schema: JSONSchema3or4 = convertToJSONSchema(schemaContent);
            const isSchemaArray = schema.type === "array";
            const schemaTitle = schema.title;
            schema.title = schema.title ? formatTitle(schema.title) : defaultTitle;
            if (schema.type === "array" && schema.items && schema.items.length > 0) {
                schema.type = "object";
                schema.properties = schema.items[0].properties;
            }
            const tsInterfaces = schemaContent.length > 0
                ? await generateTSInterfacesFromSchemaFile(schema)
                : `interface ${defaultTitle} {\n}\n\n`;
            return { schema, tsInterfaces, isSchemaArray, schemaTitle };
        };

        let {
            schema: inputSchema,
            tsInterfaces: inputTSInterfaces,
            isSchemaArray: isInputArray,
            schemaTitle: inputSchemaTitle
        } = await readAndConvertSchema(inputSchemaPath, "InputRoot");
        let {
            schema: outputSchema,
            tsInterfaces: outputTSInterfaces,
            isSchemaArray: isOutputArray,
            schemaTitle: outputSchemaTitle
        } = await readAndConvertSchema(outputSchemaPath, "OutputRoot");

        if (outputSchema.title === inputSchema.title) {
            outputTSInterfaces = outputTSInterfaces.replace('interface ' + outputSchema.title, 'interface Output' + outputSchema.title);
            outputSchema.title = `Output${outputSchema.title}`;
        }
        tsContent += `import * as dmUtils from "./dm-utils.ts";\n`;
        tsContent += `${inputTSInterfaces}\n${outputTSInterfaces}\nfunction mapFunction(input: ${inputSchema.title}${isInputArray ? "[]" : ""}): ${outputSchema.title}${isOutputArray ? "[]" : ""} {\n`;
        tsContent += `\treturn ${isOutputArray ? "[]" : "{}"}\n}\n\n`;
        tsContent += `// WARNING: Do not edit/remove below function\nfunction map_S_${getTitleSegment(inputSchemaTitle)}_S_${getTitleSegment(outputSchemaTitle)}() {\n\treturn mapFunction(input${inputSchemaTitle.replace(":", "_")});\n}\n`;
        fs.writeFileSync(tsFilepath, tsContent);
        const jsContent = convertTypeScriptToJavascript(tsContent);
        fs.writeFileSync(dmcFilePath, jsContent);
    }
    return "";
}

export async function updateDMCContent(dmName: string, sourcePath: string): Promise<string> {
    const workspaceFolder = workspace.getWorkspaceFolder(Uri.file(sourcePath));
    if (workspaceFolder) {
        const dataMapperConfigFolder = path.join(
            workspaceFolder.uri.fsPath, 'src', 'main', 'wso2mi', 'resources', 'registry', 'gov', 'datamapper');
        const tsFilepath = path.join(dataMapperConfigFolder, dmName, `${dmName}.ts`);
        const dmcFilePath = path.join(dataMapperConfigFolder, dmName, `${dmName}.dmc`);
        const tsContent = fs.readFileSync(tsFilepath, 'utf8');
        let jsContent = "// WARNING: This file has been auto-generated. Do not edit this file, as any changes will be overwritten.\n\n";
        jsContent += convertTypeScriptToJavascript(tsContent);
        fs.writeFileSync(dmcFilePath, jsContent);
    }
    return "";
}

function formatTitle(title: string): string {
    const titleSegment = getTitleSegment(title);
    return capitalizeFirstLetter(titleSegment);
}

function getTitleSegment(title: string): string {
    if (title) {
        const parts = title.split(":");
        return parts[parts.length - 1];
    }
    return title;
}

function capitalizeFirstLetter(str: string): string {
    return str.charAt(0).toUpperCase() + str.slice(1);
}