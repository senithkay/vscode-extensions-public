/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 LLC. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein in any form is strictly forbidden, unless permitted by WSO2 expressly.
 * You may not alter or remove any copyright or other notice from copies of this content.
 */

import { JSONSchema4 } from 'json-schema';
import { ParserOptions as $RefOptions } from '@apidevtools/json-schema-ref-parser';
import { cloneDeep, endsWith, merge } from 'lodash';
import { generate } from './generator';
import { normalize } from './normalizer';
import { optimize } from './optimizer';
import { parse } from './parser';
import { dereference } from './resolver';
import { error, getSchemaMetaDataAsComment } from './utils';
import { validate } from './validator';
import { link } from './linker';
import { validateOptions } from './optionValidator';
import { JSONSchema as LinkedJSONSchema } from './types/JSONSchema';

export { EnumJSONSchema, JSONSchema, NamedEnumJSONSchema, CustomTypeJSONSchema } from './types/JSONSchema'

export interface Options {
  /**
   * [$RefParser](https://github.com/APIDevTools/json-schema-ref-parser) Options, used when resolving `$ref`s
   */
  $refOptions: $RefOptions
  /**
   * Default value for additionalProperties, when it is not explicitly set.
   */
  additionalProperties: boolean
  /**
   * Disclaimer comment prepended to the top of each generated file.
   */
  bannerComment: string
  /**
   * Custom function to provide a type name for a given schema
   */
  customName?: (schema: LinkedJSONSchema, keyNameFromDefinition: string | undefined) => string | undefined
  /**
   * Root directory for resolving [`$ref`](https://tools.ietf.org/id/draft-pbryan-zyp-json-ref-03.html)s.
   */
  cwd: string
  /**
   * Declare external schemas referenced via `$ref`?
   */
  declareExternallyReferenced: boolean
  /**
   * Prepend enums with [`const`](https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members)?
   */
  enableConstEnums: boolean
  /**
   * Format code? Set this to `false` to improve performance.
   */
  format: boolean
  /**
   * Ignore maxItems and minItems for `array` types, preventing tuples being generated.
   */
  ignoreMinAndMaxItems: boolean
  /**
   * Maximum number of unioned tuples to emit when representing bounded-size array types,
   * before falling back to emitting unbounded arrays. Increase this to improve precision
   * of emitted types, decrease it to improve performance, or set it to `-1` to ignore
   * `minItems` and `maxItems`.
   */
  maxItems: number
  /**
   * Append all index signatures with `| undefined` so that they are strictly typed.
   *
   * This is required to be compatible with `strictNullChecks`.
   */
  strictIndexSignatures: boolean
  /**
   * Generate code for `definitions` that aren't referenced by the schema?
   */
  unreachableDefinitions: boolean
  /**
   * Generate unknown type instead of any
   */
  unknownAny: boolean
}

export const DEFAULT_OPTIONS: Options = {
  $refOptions: {},
  additionalProperties: true,
  bannerComment: `/* eslint-disable */
/**
* This file was automatically generated by json-schema-to-typescript.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run json-schema-to-typescript to regenerate this file.
*/`,
  cwd: process.cwd(),
  declareExternallyReferenced: true,
  enableConstEnums: true,
  format: true,
  ignoreMinAndMaxItems: false,
  maxItems: 20,
  strictIndexSignatures: false,
  unreachableDefinitions: false,
  unknownAny: true,
}

export async function compile(schema: JSONSchema4, name: string, schemaTitle: string, options: Partial<Options> = {}, addMetaDataComment: boolean = true, usedNames?: Set<string>): Promise<string> {
  validateOptions(options);
  const _options = merge({}, DEFAULT_OPTIONS, options);

  // normalize options
  if (!endsWith(_options.cwd, '/')) {
    _options.cwd += '/';
  }

  // Initial clone to avoid mutating the input
  const _schema = cloneDeep(schema);
  const { dereferencedPaths, dereferencedSchema } = await dereference(_schema, _options);
  const linked = link(dereferencedSchema);
  const errors = validate(linked, name);
  if (errors.length) {
    errors.forEach(_ => error(_));
    throw new ValidationError();
  }
  const metadata = addMetaDataComment ? getSchemaMetaDataAsComment(linked, schemaTitle) : '';
  const normalized = normalize(linked, dereferencedPaths, name, _options);
  const parsed = parse(normalized, _options, undefined, undefined, usedNames);
  const optimized = optimize(parsed, _options);
  const generated = generate(optimized, _options);
  const result = `${metadata}${generated}`;
  return result;
}

export class ValidationError extends Error { }
